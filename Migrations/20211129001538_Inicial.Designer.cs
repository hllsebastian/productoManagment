// <auto-generated />
using System;
using ApiProductManagment.ModelsUpdate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiProductManagment.Migrations
{
    [DbContext(typeof(CupboardContext))]
    [Migration("20211129001538_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CategoriesXproduct", b =>
                {
                    b.Property<string>("IdCategoryXproduct")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idCategoryXProduct");

                    b.Property<string>("IdCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idCategory");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idProduct");

                    b.HasKey("IdCategoryXproduct")
                        .HasName("PK__Categori__E775EBF5BECA41C4");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdProduct");

                    b.ToTable("CategoriesXProduct");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Category", b =>
                {
                    b.Property<string>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idCategory");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CupBoard", b =>
                {
                    b.Property<string>("IdCupBoard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("NameCupBoard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCupBoard")
                        .HasName("PK__CupBoard__089DCDC596B81653");

                    b.ToTable("CupBoards");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CupBoardDetail", b =>
                {
                    b.Property<string>("IdCupboardDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("idCupboardDetail");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IdCupBoard")
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("idCupBoard");

                    b.Property<string>("IdProduct")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idProduct");

                    b.HasKey("IdCupboardDetail")
                        .HasName("PK__CupBoard__45BC4B6ADE04BAA2");

                    b.HasIndex("IdCupBoard");

                    b.HasIndex("IdProduct");

                    b.ToTable("CupBoardDetail");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Product", b =>
                {
                    b.Property<string>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idProduct");

                    b.Property<string>("BarCode")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("barCode");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationDate");

                    b.Property<string>("IdMark")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idMark");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameProduct");

                    b.HasKey("IdProduct")
                        .HasName("PK__Products__5EEC79D120FD1CAC");

                    b.HasIndex("IdMark");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.ShoppingList", b =>
                {
                    b.Property<string>("IdShopping")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idShopping");

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expirationDate");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idProduct");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("value_");

                    b.HasKey("IdShopping")
                        .HasName("PK__Shopping__957AB8FE0BB0BFD7");

                    b.HasIndex("IdProduct");

                    b.ToTable("ShoppingList");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Trademark", b =>
                {
                    b.Property<string>("IdTrademark")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idTrademark");

                    b.Property<string>("Mark")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mark");

                    b.HasKey("IdTrademark")
                        .HasName("PK__Trademar__7C4427A36D95025C");

                    b.ToTable("Trademarks");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.User", b =>
                {
                    b.Property<string>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idUser");

                    b.HasKey("IdUser")
                        .HasName("PK__Users__3717C982E1EBA768");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.UserXcupBoard", b =>
                {
                    b.Property<string>("IdUserXcupboard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idUserXCupboard");

                    b.Property<string>("IdCupBoard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idCupBoard");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idUser");

                    b.HasKey("IdUserXcupboard")
                        .HasName("PK__UserXCup__D653D90B6AEE5AA5");

                    b.HasIndex("IdCupBoard");

                    b.HasIndex("IdUser");

                    b.ToTable("UserXCupBoard");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.UserXshoppingList", b =>
                {
                    b.Property<string>("IdUserXshopping")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idUserXShopping");

                    b.Property<string>("IdShopping")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idShopping");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idUser");

                    b.HasKey("IdUserXshopping")
                        .HasName("PK__UserXSho__3DDAB8017C0E8680");

                    b.HasIndex("IdShopping");

                    b.HasIndex("IdUser");

                    b.ToTable("UserXShoppingList");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CategoriesXproduct", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Category", "IdCategoryNavigation")
                        .WithMany("CategoriesXproducts")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK_Category_CategoryXProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiProductManagment.ModelsUpdate.Product", "IdProductNavigation")
                        .WithMany("CategoriesXproducts")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_Product_CategoryXProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CupBoardDetail", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.CupBoard", "CupBoard")
                        .WithMany("CupBoardDetails")
                        .HasForeignKey("IdCupBoard")
                        .HasConstraintName("FK_CupBoard_Detail");

                    b.HasOne("ApiProductManagment.ModelsUpdate.Product", "Product")
                        .WithMany("CupBoardDetails")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_CupBoard_Products");

                    b.Navigation("CupBoard");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Product", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Trademark", "Trademark")
                        .WithMany("Products")
                        .HasForeignKey("IdMark")
                        .HasConstraintName("FK_Mark_Products")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trademark");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.ShoppingList", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Product", "IdProductNavigation")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_User_Shopping")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.UserXcupBoard", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.CupBoard", "IdCupBoardNavigation")
                        .WithMany("UserXcupBoards")
                        .HasForeignKey("IdCupBoard")
                        .HasConstraintName("FK_CupBoard_UserCupBoard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiProductManagment.ModelsUpdate.User", "IdUserNavigation")
                        .WithMany("UserXcupBoards")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_User_CupBoard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCupBoardNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.UserXshoppingList", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.ShoppingList", "IdShoppingNavigation")
                        .WithMany("UserXshoppingLists")
                        .HasForeignKey("IdShopping")
                        .HasConstraintName("FK_Shopping_UserXShopping")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiProductManagment.ModelsUpdate.User", "IdUserNavigation")
                        .WithMany("UserXshoppingLists")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_User_UserXShopping")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdShoppingNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiProductManagment.ModelsUpdate.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApiProductManagment.ModelsUpdate.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Category", b =>
                {
                    b.Navigation("CategoriesXproducts");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.CupBoard", b =>
                {
                    b.Navigation("CupBoardDetails");

                    b.Navigation("UserXcupBoards");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Product", b =>
                {
                    b.Navigation("CategoriesXproducts");

                    b.Navigation("CupBoardDetails");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.ShoppingList", b =>
                {
                    b.Navigation("UserXshoppingLists");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.Trademark", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ApiProductManagment.ModelsUpdate.User", b =>
                {
                    b.Navigation("UserXcupBoards");

                    b.Navigation("UserXshoppingLists");
                });
#pragma warning restore 612, 618
        }
    }
}
